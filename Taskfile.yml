version: '3'

tasks:
  build:
    desc: Build the Docker container
    cmds:
      - docker-compose build

  up:
    desc: Start the development container
    cmds:
      - docker-compose up -d app

  down:
    desc: Stop all containers
    cmds:
      - docker-compose down

  shell:
    desc: Open a shell in the running container
    cmds:
      - docker-compose exec app bash

  test:
    desc: Run all tests with SQLite
    cmds:
      - docker-compose run --rm test

  test:specific:
    desc: Run specific test file with SQLite
    cmds:
      - docker-compose run --rm test pytest -v {{.CLI_ARGS}}
      
  test:postgres:
    desc: Run all tests with PostgreSQL
    cmds:
      - docker-compose run --rm test-postgres

  test:postgres:specific:
    desc: Run specific test file with PostgreSQL
    cmds:
      - docker-compose run --rm test-postgres pytest -v {{.CLI_ARGS}}
      
  test:multi-db:
    desc: Run tests with both SQLite and PostgreSQL
    cmds:
      - echo "Running tests with SQLite..."
      - docker-compose run --rm test
      - echo "Running tests with PostgreSQL..."
      - docker-compose run --rm test-postgres

  init-db:
    desc: Initialize the database with schema
    cmds:
      - docker-compose exec app python -c "from src.database.connection import get_connection; from src.database.schema import create_tables; conn = get_connection('data/mail.db'); create_tables(conn); conn.close()"

  migrate:
    desc: Run all migrations
    cmds:
      - docker-compose exec app python -c "from src.database.connection import get_connection; from src.migrations.schema_migrations import SchemaMigration; conn = get_connection('data/mail.db'); migration = SchemaMigration(conn); migration.apply_migrations_from_directory('data/sql/migrations'); conn.close()"

  create-sample-data:
    desc: Create sample data in the database
    cmds:
      - docker-compose exec app python -c "from data.sample_data import generate_sample_data; generate_sample_data('data/mail.db')"

  sqlite-shell:
    desc: Open SQLite shell for the database
    cmds:
      - docker-compose exec app sqlite3 data/mail.db

  clean:
    desc: Remove all generated files
    cmds:
      - rm -f data/mail.db
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type f -name "*.pyc" -delete
      - find . -type f -name "*.pyo" -delete
      - find . -type f -name "*.pyd" -delete
      - find . -type f -name ".coverage" -delete
      - find . -type d -name "*.egg-info" -exec rm -rf {} +
      - find . -type d -name "*.egg" -exec rm -rf {} +
      - find . -type d -name ".pytest_cache" -exec rm -rf {} +
      - find . -type d -name ".coverage" -exec rm -rf {} +
      - find . -type d -name "htmlcov" -exec rm -rf {} +
      - find . -type d -name "dist" -exec rm -rf {} +
      - find . -type d -name "build" -exec rm -rf {} +

  setup:
    desc: Complete setup (build, start, initialize DB)
    cmds:
      - task: build
      - task: up
      - task: init-db
      - task: migrate
      - task: create-sample-data
      - echo "Setup complete! Run 'task test' to run tests."

  fmt:
    desc: Format code with black and isort
    cmds:
      - poetry run black .
      - poetry run isort .

  fmt:check:
    desc: Check if code is properly formatted without making changes
    cmds:
      - poetry run black --check .
      - poetry run isort --check .

  lint:
    desc: Run all linters
    cmds:
      - task: lint:flake8
      - task: lint:mypy
      - task: lint:bandit

  lint:flake8:
    desc: Run flake8 linter
    cmds:
      - poetry run flake8 src tests data

  lint:mypy:
    desc: Run mypy type checker (warnings only during transition)
    cmds:
      - poetry run mypy --config-file pyproject.toml --follow-imports=skip --ignore-missing-imports --no-strict-optional src tests data || echo "mypy issues found - these will be addressed in a future PR"

  lint:bandit:
    desc: Run bandit security linter (warnings only during transition)
    cmds:
      - poetry run bandit -r src data -ll || echo "Bandit security issues found - these will be addressed in a future PR"

  quality:
    desc: Run all code quality checks
    cmds:
      - task: fmt:check
      - task: lint

  fix:whitespace:
    desc: Fix trailing whitespace issues
    cmds:
      - find src tests data -name '*.py' -type f -exec sed -i '' 's/[[:space:]]*$//' {} \;

  fix:imports:
    desc: Fix unused imports using autoflake
    cmds:
      - poetry run pip install autoflake
      - poetry run autoflake --in-place --remove-all-unused-imports --recursive src tests data

  fix:all:
    desc: Fix all auto-fixable linting issues
    cmds:
      - task: fix:whitespace
      - task: fix:imports
      - task: fmt
